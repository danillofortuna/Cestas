unit uFrmVendas;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uDM, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt,
  Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client, Vcl.Mask, Vcl.DBCtrls,
  Vcl.Buttons, Vcl.StdCtrls, Vcl.ExtCtrls, Vcl.Grids, Vcl.DBGrids,
  System.Actions, Vcl.ActnList, Datasnap.DBClient;

type
  TfrmVendas = class(TForm)
    grdPesquisa: TDBGrid;
    pnlDados: TPanel;
    pnlPesquisa: TPanel;
    lblPesquisar: TLabel;
    lblPesCodigo: TLabel;
    pnlBtnPesquisar: TPanel;
    btnPesquisar: TButton;
    edtPesCodigo: TEdit;
    pnlTitulo: TPanel;
    btnFechar: TSpeedButton;
    pnlBotoes: TPanel;
    edtCodigo: TDBEdit;
    lblCodigo: TLabel;
    qryMaster: TFDQuery;
    dsMaster: TDataSource;
    lblData_Venda: TLabel;
    edtDataVenda: TDBEdit;
    lblCliente: TLabel;
    btnPesCliente: TSpeedButton;
    lblMercadorias: TLabel;
    btnPesMercadorias: TSpeedButton;
    edtMercadorias: TEdit;
    grdMercadorias: TDBGrid;
    lblDel: TLabel;
    lblParcelas: TLabel;
    edtParcelas: TEdit;
    grdParcelas: TDBGrid;
    qryClientes: TFDQuery;
    dsClientes: TDataSource;
    fdtncfldMasterid1: TFDAutoIncField;
    intgrfldMasterid_cliente: TIntegerField;
    strngfldMasternome1: TStringField;
    dtfldMasterdata_venda: TDateField;
    strngfldMasterparcelado: TStringField;
    dtfldMasterdata_recebimento: TDateField;
    snglfldMastervalor_recebido: TSingleField;
    strngfldMastercancelada: TStringField;
    strngfldMastermotivo_cancelamento: TStringField;
    snglfldMastervalor_total: TSingleField;
    fdtncfldClientesid: TFDAutoIncField;
    strngfldClientesnome: TStringField;
    lcbClientes: TDBLookupComboBox;
    qryMercadorias: TFDQuery;
    dsMercadorias: TDataSource;
    fdtncfldMercadoriasid: TFDAutoIncField;
    intgrfldMercadoriasid_venda: TIntegerField;
    intgrfldMercadoriasid_mercadoria: TIntegerField;
    strngfldMercadoriasnome: TStringField;
    snglfldMercadoriaspreco: TSingleField;
    snglfldMercadoriasajuste: TSingleField;
    intgrfldMercadoriasquantidade: TIntegerField;
    qryParcelas: TFDQuery;
    dsParcelas: TDataSource;
    fdtncfldParcelasid: TFDAutoIncField;
    intgrfldParcelasid_venda: TIntegerField;
    snglfldParcelasvalor: TSingleField;
    dtfldParcelasdata_vencimento: TDateField;
    dtfldParcelasdata_recebimento: TDateField;
    actlstBotoes: TActionList;
    actNovo: TAction;
    actAlterar: TAction;
    actCancelar: TAction;
    actGravar: TAction;
    actExcluir: TAction;
    actPesquisar: TAction;
    btnNovo: TSpeedButton;
    btnAlterar: TSpeedButton;
    btnGravar: TSpeedButton;
    btnCancelar: TSpeedButton;
    btnExcluir: TSpeedButton;
    actPesquisas: TAction;
    cdsTemporario: TClientDataSet;
    intgrfldTemporarioid_mercadoria: TIntegerField;
    fltfldTemporarioajuste: TFloatField;
    intgrfldTemporarioquantidade: TIntegerField;
    btnGerar: TButton;
    lblValorTotal: TLabel;
    edtValorTotal: TEdit;
    fltfldTemporariopreco: TFloatField;
    procedure qryMasterAfterOpen(DataSet: TDataSet);
    procedure qryMasterBeforeCancel(DataSet: TDataSet);
    procedure qryMasterBeforeClose(DataSet: TDataSet);
    procedure qryMasterAfterPost(DataSet: TDataSet);
    procedure actNovoExecute(Sender: TObject);
    procedure restauraSQL;
    procedure actAlterarExecute(Sender: TObject);
    procedure actCancelarExecute(Sender: TObject);
    procedure actExcluirExecute(Sender: TObject);
    procedure actPesquisarExecute(Sender: TObject);
    procedure actGravarExecute(Sender: TObject);
    procedure btnPesClienteClick(Sender: TObject);
    procedure btnFecharClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormShow(Sender: TObject);
    procedure btnPesMercadoriasClick(Sender: TObject);
    procedure actPesquisasExecute(Sender: TObject);
    procedure edtMercadoriasExit(Sender: TObject);
    procedure qryMercadoriasBeforeInsert(DataSet: TDataSet);
    procedure qryParcelasBeforeInsert(DataSet: TDataSet);
    procedure grdMercadoriasKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
    procedure qryMasterBeforePost(DataSet: TDataSet);
    procedure btnGerarClick(Sender: TObject);
    procedure somaValores;
    procedure qryMercadoriasAfterOpen(DataSet: TDataSet);
    procedure qryMercadoriasAfterPost(DataSet: TDataSet);
    procedure qryMercadoriasAfterRefresh(DataSet: TDataSet);
    procedure snglfldMercadoriasajusteChange(Sender: TField);
    procedure intgrfldMercadoriasquantidadeChange(Sender: TField);
    function validaParcelas: Boolean;
    procedure btn1Click(Sender: TObject);
    procedure qryParcelasAfterApplyUpdates(DataSet: TFDDataSet;
      AErrors: Integer);
    procedure qryMasterAfterScroll(DataSet: TDataSet);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmVendas: TfrmVendas;
  inserindo : Boolean;
  valorTotal : double;
  id_venda : Integer;

implementation

uses
  uFrmPesClientes, uFrmPesMercadorias;

{$R *.dfm}

procedure TfrmVendas.actAlterarExecute(Sender: TObject);
begin
 if qryMaster.IsEmpty then
  begin
    Application.MessageBox('Selecione um registro para alterar.', '', MB_OK +
      MB_ICONWARNING);
    Exit;
  end;
  actNovo.Enabled     := false;
  actAlterar.Enabled  := false;
  actGravar.Enabled   := True;
  actCancelar.Enabled := true;
  actExcluir.Enabled  := false;
  btnPesCliente.Enabled := true;
  grdPesquisa.Enabled := false;
  btnPesMercadorias.Enabled := true;
  edtMercadorias.Enabled := true;
  edtParcelas.Enabled := true;
  lcbClientes.Enabled := true;
  btnGerar.Enabled:=False;
  dsMercadorias.AutoEdit := True;
  dsParcelas.AutoEdit := True;
  qryMaster.Edit;
end;

procedure TfrmVendas.actCancelarExecute(Sender: TObject);
begin
  actNovo.Enabled     := True;
  actAlterar.Enabled  := True;
  actGravar.Enabled   := False;
  actCancelar.Enabled := False;
  actExcluir.Enabled  := True;
  btnPesCliente.Enabled := False;
  btnPesMercadorias.Enabled := False;
  grdPesquisa.Enabled := True;
  edtMercadorias.Enabled := false;
  edtParcelas.Enabled := false;
  lcbClientes.Enabled := false;
  btnGerar.Enabled := false;
  dsMercadorias.AutoEdit := false;
  dsParcelas.AutoEdit := false;

  qryMaster.Cancel;
end;

procedure TfrmVendas.actExcluirExecute(Sender: TObject);
begin
  if qryMaster.IsEmpty then
  begin
    Application.MessageBox('Não existe registro para ser excluido!', '', MB_OK
      + MB_ICONINFORMATION);
    exit;
  end
  else
  if Application.MessageBox('Realmente deseja excluir este registro?', '',
    MB_YESNO + MB_ICONQUESTION) = IDNO then
  begin
    Exit;
  end
  else
  begin
    qryMaster.Delete;
    qryMaster.Refresh;
  end;
end;

procedure TfrmVendas.actGravarExecute(Sender: TObject);
begin
  if qryParcelas.IsEmpty then
  begin
    Application.MessageBox('Por favor, gere pelo menos uma parcela.', '',
      MB_OK + MB_ICONWARNING);
    Exit;
  end;

  if not validaParcelas then
  begin
    Application.MessageBox('O valor das parcelas não bate com o valor total. '
      + #13#10 +
      'Por favor, ajuste manualmente ou clique novamente em [Gerar].', '',
      MB_OK + MB_ICONWARNING);
      Exit;
  end;

  if Application.MessageBox('Não será possível alterar os dados desta venda após gravar.'
    + #13#10 + 'Deseja continuar?', 'Atenção', MB_YESNO + MB_ICONWARNING) =
    IDNO then
  begin
    Exit;
  end;



  actNovo.Enabled     := True;
  actAlterar.Enabled  := True;
  actGravar.Enabled   := False;
  actCancelar.Enabled := False;
  actExcluir.Enabled  := True;
  btnPesCliente.Enabled := False;
  btnPesMercadorias.Enabled := False;
  grdPesquisa.Enabled := True;
  edtMercadorias.Enabled := false;
  edtParcelas.Enabled := false;
  lcbClientes.Enabled := false;
  dsMercadorias.AutoEdit := False;
  dsParcelas.AutoEdit := False;
  btnGerar.Enabled := False;
  id_venda := qryMaster.FieldByName('id').AsInteger;
  qryMaster.Post;
  qryParcelas.ApplyUpdates(0);
  qryMaster.Refresh;
end;

procedure TfrmVendas.actNovoExecute(Sender: TObject);
begin
  edtPesCodigo.SetFocus;
  actNovo.Enabled     := false;
  actAlterar.Enabled  := false;
  actGravar.Enabled   := True;
  actCancelar.Enabled := true;
  actExcluir.Enabled  := false;
  btnPesCliente.Enabled := true;
  btnPesMercadorias.Enabled := true;
  grdPesquisa.Enabled := false;
  edtMercadorias.Enabled := true;
  edtParcelas.Enabled := true;
  lcbClientes.Enabled := true;
  btnGerar.Enabled := True;
  dsMercadorias.AutoEdit := True;
  dsParcelas.AutoEdit := True;
  restauraSQL;
  if not qryMaster.Active then
  begin
    qryMaster.Open();
  end;
  qryMaster.Insert;
  qryMaster.FieldByName('data_venda').AsDateTime := now;
  edtDataVenda.SetFocus;
end;

procedure TfrmVendas.actPesquisarExecute(Sender: TObject);
begin
  edtPesCodigo.SetFocus;
end;

procedure TfrmVendas.actPesquisasExecute(Sender: TObject);
begin
  if ActiveControl = lcbClientes then
  begin
    btnPesCliente.Click;
  end
  else
  if ActiveControl = edtMercadorias then
  begin
    btnPesMercadorias.Click;
  end;

end;

procedure TfrmVendas.btn1Click(Sender: TObject);
begin
  if validaParcelas then
  begin
    ShowMessage('ok');
  end;
end;

procedure TfrmVendas.btnFecharClick(Sender: TObject);
begin
  close;
end;

procedure TfrmVendas.btnGerarClick(Sender: TObject);
var
  parcelas : TStrings;
  valores : array of integer;
  parcela : Double;
  diferenca : Double;
  I : Integer;
begin
  parcelas := TStringList.Create;
  if edtParcelas.Text = emptyStr then
  begin
    edtParcelas.Text := '0';
  end;
  parcelas.Delimiter := '/';
  parcelas.DelimitedText := edtParcelas.Text;
  SetLength(valores, parcelas.Count);
  for I := 0 to parcelas.Count-1 do
  begin
    if not TryStrToInt(parcelas[i], valores[i]) then
    begin
      Application.MessageBox('Expressão inválida!', '', MB_OK + MB_ICONSTOP);
      Exit;
    end;
  end;

  parcela := StrToFloat(edtValorTotal.Text)/Length(valores);

  diferenca := 0;
  if parcela*Length(valores) <> valorTotal then
  begin
    diferenca := valorTotal - (parcela*Length(valores));
  end;

  while qryParcelas.RecordCount > 0 do
  begin
    qryParcelas.Delete;
  end;

  for I := 0 to Length(valores)-1 do
  begin
    qryParcelas.Insert;
    if I = 0 then
    begin
      qryParcelas.FieldByName('valor').AsFloat := parcela + diferenca;
    end
    else
    begin
      qryParcelas.FieldByName('valor').AsFloat := parcela;
    end;
    qryParcelas.FieldByName('data_vencimento').AsDateTime := Now + valores[i];
    qryParcelas.Post;
  end;

end;

procedure TfrmVendas.btnPesClienteClick(Sender: TObject);
var
  pesquisaClientes : TfrmPesClientes;
begin
  if qryMaster.State in [dsEdit, dsInsert] then
  begin
    pesquisaClientes := TfrmPesClientes.Create(self);
    pesquisaClientes.ShowModal;
    lcbClientes.KeyValue := pesquisaClientes.id;
    FreeAndNil(pesquisaClientes);
  end;

end;

procedure TfrmVendas.btnPesMercadoriasClick(Sender: TObject);
var
  pesquisaMercadorias : TfrmPesMercadorias;
begin
  inserindo := true;
  if qryMaster.State in [dsEdit, dsInsert] then
  begin
    pesquisaMercadorias := TfrmPesMercadorias.Create(self);
    if edtMercadorias.Text <> EmptyStr then
    begin
      pesquisaMercadorias.edtPesCodigo.Text := edtMercadorias.Text;
    end;
    edtMercadorias.Clear;
    pesquisaMercadorias.ShowModal;
    qryMercadorias.Insert;
    qryMercadorias.FieldByName('id_mercadoria').AsInteger := pesquisaMercadorias.id;
    qryMercadorias.FieldByName('nome').AsString := pesquisaMercadorias.texto;
    qryMercadorias.FieldByName('preco').AsFloat := pesquisaMercadorias.preco;
    qryMercadorias.FieldByName('quantidade').AsInteger := 1;
    qryMercadorias.FieldByName('ajuste').AsFloat := 0;
    qryMercadorias.Post;
    FreeAndNil(pesquisaMercadorias);
    inserindo := false;
    somaValores;
    edtMercadorias.SetFocus;
  end;

end;

procedure TfrmVendas.edtMercadoriasExit(Sender: TObject);
begin
  if edtMercadorias.Text <> EmptyStr then
  begin
    btnPesMercadorias.Click;
  end;
end;

procedure TfrmVendas.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  Action := caFree;
  frmVendas := nil;
end;

procedure TfrmVendas.FormKeyPress(Sender: TObject; var Key: Char);
begin
  if ((Key = #13) and (activeControl <> grdPesquisa) and
      (activeControl <> grdMercadorias) and (activeControl <> grdParcelas)) then
  begin
    Perform(WM_NEXTDLGCTL,0,0);
    Key := #0;
  end;
end;

procedure TfrmVendas.FormShow(Sender: TObject);
begin
  qryMaster.Open();
  qryClientes.Open();
end;

procedure TfrmVendas.grdMercadoriasKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin

  if Key = VK_DELETE then
  begin
    if qryMaster.State in [dsEdit, dsInsert] then
    begin
      if qryMercadorias.Active then
      begin
        if not qryMercadorias.IsEmpty then
        begin
          if qryMercadorias.State in [dsEdit, dsInsert] then
          begin
            qryMercadorias.Cancel;
          end
          else
          begin
            qryMercadorias.Delete;
          end;
        end;
      end;
    end;
  end;

end;

procedure TfrmVendas.intgrfldMercadoriasquantidadeChange(Sender: TField);
begin
  somaValores;
end;

procedure TfrmVendas.qryMasterAfterOpen(DataSet: TDataSet);
begin
  qryMercadorias.Open();
  qryParcelas.Open();
end;

procedure TfrmVendas.qryMasterAfterPost(DataSet: TDataSet);
begin
  cdsTemporario.First;
  inserindo := True;
  DM.conMysql.ExecSQL('delete from itens_venda where id_venda = '+qryMaster.FieldByName('id').asString);
  cdsTemporario.First;
  while not cdsTemporario.Eof do
  begin
    qryMercadorias.Insert;
    qryMercadorias.FieldByName('id_mercadoria').AsInteger :=
      cdsTemporario.FieldByName('id_mercadoria').AsInteger;
    qryMercadorias.FieldByName('quantidade').AsInteger :=
      cdsTemporario.FieldByName('quantidade').AsInteger;
    qryMercadorias.FieldByName('ajuste').AsInteger :=
      cdsTemporario.FieldByName('ajuste').AsInteger;
    qryMercadorias.FieldByName('preco').AsInteger :=
      cdsTemporario.FieldByName('preco').AsInteger;

    qryMercadorias.Post;
    cdsTemporario.Next;
  end;
  inserindo := false;
  qryMercadorias.ApplyUpdates(0);
  qryMercadorias.CommitUpdates;
  qryMercadorias.Refresh;
end;

procedure TfrmVendas.qryMasterAfterScroll(DataSet: TDataSet);
begin
  somaValores;
end;

procedure TfrmVendas.qryMasterBeforeCancel(DataSet: TDataSet);
begin
  qryParcelas.Cancel;
  qryMercadorias.Cancel;
end;

procedure TfrmVendas.qryMasterBeforeClose(DataSet: TDataSet);
begin
  qryMercadorias.Close;
  qryParcelas.Close;
end;

procedure TfrmVendas.qryMasterBeforePost(DataSet: TDataSet);
begin
  if qryMercadorias.State in [dsEdit, dsInsert] then
  begin
    qryMercadorias.post;
  end;
  qryMercadorias.First;
  cdsTemporario.Close;
  cdsTemporario.CreateDataSet;
  cdsTemporario.Open;
  while not qryMercadorias.Eof do
  begin
    cdsTemporario.Insert;
    cdsTemporario.FieldByName('id_mercadoria').AsInteger :=
      qryMercadorias.FieldByName('id_mercadoria').AsInteger;
    cdsTemporario.FieldByName('quantidade').AsInteger :=
      qryMercadorias.FieldByName('quantidade').AsInteger;
    cdsTemporario.FieldByName('ajuste').AsInteger :=
      qryMercadorias.FieldByName('ajuste').AsInteger;
    cdsTemporario.FieldByName('preco').AsInteger :=
      qryMercadorias.FieldByName('preco').AsInteger;
    cdsTemporario.Post;
    qryMercadorias.Next;
  end;
  qryMercadorias.cancelupdates;
end;

procedure TfrmVendas.qryMercadoriasAfterOpen(DataSet: TDataSet);
begin
  somaValores;
end;

procedure TfrmVendas.qryMercadoriasAfterPost(DataSet: TDataSet);
begin
  somaValores;
end;

procedure TfrmVendas.qryMercadoriasAfterRefresh(DataSet: TDataSet);
begin
  somaValores;
end;

procedure TfrmVendas.qryMercadoriasBeforeInsert(DataSet: TDataSet);
begin
  if ((qryMaster.IsEmpty) or (not inserindo)) then
  begin
    abort;
  end;
end;

procedure TfrmVendas.qryParcelasAfterApplyUpdates(DataSet: TFDDataSet;
  AErrors: Integer);
begin
  qryParcelas.CommitUpdates;
  dm.conMysql.ExecSQL('update parcelas_venda set id_venda = '+qryMaster.FieldByName('id').AsString
                      +' where id_venda = '+IntToStr(id_venda));
  id_venda := 0;
  qryParcelas.Refresh;
end;

procedure TfrmVendas.qryParcelasBeforeInsert(DataSet: TDataSet);
begin
  if ((qryMaster.IsEmpty) or (grdParcelas.Focused)) then
  begin
    abort;
  end;
end;

procedure TfrmVendas.restauraSQL;
begin
  //restaurar SQL
end;

procedure TfrmVendas.snglfldMercadoriasajusteChange(Sender: TField);
begin
  somaValores;
end;

procedure TfrmVendas.somaValores;
var
  valor : Double;
  recno : integer;
begin
  if not inserindo then
  begin
    valor := 0;
    qryMercadorias.DisableControls;
    recno := qryMercadorias.RecNo;
    qryMercadorias.First;
    while not qryMercadorias.eof do
    begin
      valor := qryMercadorias.FieldByName('ajuste').AsFloat +
                (qryMercadorias.FieldByName('quantidade').AsInteger *
                qryMercadorias.FieldByName('preco').AsFloat)  +
               valor;
      qryMercadorias.Next;
    end;
    qryMercadorias.RecNo := recno;
    qryMercadorias.EnableControls;
    valorTotal := valor;
    edtValorTotal.Text := FormatFloat('0.00', valor);
  end;

end;

function TfrmVendas.validaParcelas: Boolean;
var
  soma : Double;
begin
  qryParcelas.DisableControls;
  qryParcelas.First;
  soma := 0;
  while not qryParcelas.Eof do
  begin
    soma := soma + qryParcelas.FieldByName('valor').AsFloat;
    qryParcelas.Next;
  end;
  qryParcelas.EnableControls;
  Result := (FormatFloat('##.00', soma) = FormatFloat('##.00',valorTotal) );

end;

end.
